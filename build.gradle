buildscript {
    repositories {
        maven { url 'https://plugins.gradle.org/m2/' }
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "io.gitlab.arturbosch.detekt:detekt-gradle-plugin:$detekt_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
        classpath "com.adarshr:gradle-test-logger-plugin:1.2.0"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:$sonarqube_version"
    }
}

group 'com.hxdcml'
version '0.0.1'

apply plugin: 'kotlin'
apply plugin: 'idea'
apply plugin: 'org.sonarqube'
apply plugin: 'jacoco'
apply plugin: 'com.adarshr.test-logger'
apply plugin: 'io.gitlab.arturbosch.detekt'
apply plugin: 'org.jetbrains.dokka'

task wrapper(type: Wrapper) {
    gradleVersion = '4.5.1'
    //noinspection UnnecessaryQualifiedReference
    distributionType = Wrapper.DistributionType.ALL
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

configurations {
    ktlint
}

dependencies {
    ktlint group: "com.github.shyiko", name: "ktlint", version: "$ktlint_version"
    implementation group: "org.jetbrains.kotlin", name: "kotlin-stdlib-jdk8", version: "$kotlin_version"
    implementation group: 'org.apache.spark', name: 'spark-core_2.11', version: "$spark_version"
    implementation group: 'org.apache.spark', name: 'spark-sql_2.11', version: "$spark_version"
    implementation group: 'org.apache.spark', name: 'spark-hive_2.11', version: "$spark_version"

    testImplementation group: 'junit', name: 'junit', version: "$junit_version"
    testImplementation group: 'com.holdenkarau', name: 'spark-testing-base_2.11', version: "$spark_test_version"
    testImplementation group: 'org.amshove.kluent', name: 'kluent', version: "$kluent_version"
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "src/**/*.kt"
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "-F", "src/**/*.kt"
}

testlogger {
    theme 'plain'
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"
}

jacoco {
    toolVersion = "$jacoco_version"
    reportsDir = file("$buildDir/reports/jacoco")
}

jacocoTestReport {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    reports {
        xml.setEnabled(true)
        xml.setDestination(file("${buildDir}/reports/jacoco/report.xml"))
        html.setEnabled(true)
        html.setDestination(file("$buildDir/reports/jacoco"))
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [])
        })

        sourceDirectories = files(['src/main/kotlin'])
    }
}

detekt {
    version = "$detekt_version"
    profile("main") {
        input = "$projectDir/src/main/kotlin"
        config = "$projectDir/detekt.yml"
        filters = ".*test.*,.*/resources/.*,.*/tmp/.*"
        baseline = "$projectDir/reports/baseline.xml"
    }
}

sonarqube {
    properties {
        property 'detekt.sonar.kotlin.config.path', "$projectDir/detekt.yml"
        property 'sonar.java.coveragePlugin', 'jacoco'
        property 'sonar.jacoco.reportPaths', "$buildDir/jacoco/test.exec"
        property 'sonar.java.binaries', "$buildDir/classes"
    }
}